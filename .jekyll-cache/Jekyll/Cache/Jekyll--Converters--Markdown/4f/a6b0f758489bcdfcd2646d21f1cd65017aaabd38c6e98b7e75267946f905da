I"&<p><img src="https://miro.medium.com/max/700/1*rG6GnMOz0nlRUUU1Va7aTA.jpeg" alt="Container House" /></p>

<p><a href="https://medium.com/@jrperin1975/docker-accessing-host-database-49e1ff92a40"><strong>Acesse meu Medium e veja versão em Inglês</strong></a></p>

<hr />

<h2 id="introdução">Introdução</h2>

<p>Atualmente ao desenvolver uma aplicação, <strong>é impossível</strong> não pensar em embarcá-la em um <strong>contêiner</strong>.</p>

<p>A conteinerização das nossas aplicações traz ganhos como padronização, portabilidade, automatização que facilitam em muito o deploy.
Mas uma questão sempre fica rondando, até onde devemos levar para contêineres?</p>

<p>Na minha opinião estruturas de bancos de dados como Mysql, Mariadb, MongoDb quando em produção, deveriam ter recursos mais dedicados a eles, mais “bare metal”.</p>

<p>Não estou considerando recursos de bancos de dados gerenciados pelos provedores de cloud como AWS, Google, Azure. Estou considerando que a gestão dos recursos dos bancos de dados é feita por você.</p>

<p>Claro que se estivermos falando em ambiente de desenvolvimento, o cenário é outro.</p>

<p>Colocar os recursos de banco de dados em contêineres, facilita muito para o desenvolvedor ter um um ambiente rodando. Sem que ele tenha que se preocupar com a infraestrutura.</p>

<p>Para que um uma aplicação docker possa acessar o “mundo externo” é preciso informar para ela o IP do host (do hospedeiro).</p>

<p>No <code class="language-plaintext highlighter-rouge">docker-compose</code> isso é feito pelo membro <code class="language-plaintext highlighter-rouge">extra_hosts</code> ou via linha de comando com o parâmetro <code class="language-plaintext highlighter-rouge">--add-hosts</code>, que adiciona o endereço ao DNS interno do Docker.</p>

<p>Nesse <em>case</em>, vou focar no <strong>docker-compose</strong>.</p>

<p><strong>Resumo dos passos que serão dados:</strong></p>

<ol>
  <li>
    <p>Instalar o banco de dados Mariadb em um computador com Ubuntu que será a máquina hospedeira.</p>
  </li>
  <li>
    <p>Criar um contêiner com ferramentas para acessar o banco de dados Mariadb do hospedeiro (Dockerfile e docker-compose.yml).</p>
  </li>
  <li>
    <p>Alterar as permissões do usuário root do banco de dados para permitir acesso do <strong>IP docker</strong> atribuído ao host.</p>
  </li>
  <li>
    <p>Alterar o <strong>bind-address</strong> do banco de dados para permitir acesso através do <strong>IP docker do host</strong>.</p>
  </li>
  <li>
    <p>Validar, fazendo o teste de conexão do contêiner para o host.</p>
  </li>
</ol>

<h2 id="execução">Execução</h2>

<h3 id="1-instalar-mariadb-no-hospedeiro">1. Instalar MariaDB no hospedeiro</h3>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install</span> <span class="nt">-y</span> mariadb-server
</code></pre></div></div>

<h3 id="2-criar-contêiner-para-acessar-o-db-no-host">2. Criar contêiner para acessar o DB no host</h3>

<p>Criar o arquivo <strong>Dockerfile</strong>:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM ubuntu
RUN apt update <span class="o">&amp;&amp;</span> apt <span class="nb">install</span> <span class="nt">-y</span> iputils-ping net-tools telnet vim mysql-client
</code></pre></div></div>

<p>Criar o arquivo <strong>docker-compose.yml:</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3.9"</span>
<span class="na">services</span><span class="pi">:</span>
    <span class="na">ubuntu</span><span class="pi">:</span>
        <span class="na">build</span><span class="pi">:</span>
            <span class="na">context</span><span class="pi">:</span> <span class="s">./</span>
            <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
    <span class="na">extra_hosts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s2">"</span><span class="s">database:172.17.0.1"</span>
</code></pre></div></div>

<p>O que permite acessar o host é a sessão <strong>extra_hosts</strong> no docker-compose.</p>

<p>Algumas abordagens sugerem para colocar o IP externo para <strong>database</strong>, mas essa abordagem pode ser perigosa, pois o IP do servidor ficará exposto para a internet.</p>

<p>Outra abordagem diz que as versões mais recentes do docker permitem usar o DNS <strong>host.docker.internal</strong> para acessar o IP da interface de network docker do host, mas estou usando a versão 19.03.8 do docker no linux ubuntu e não foi possível acessá-lo.</p>

<p>Por esse motivo, optei por <strong>colocar o número de IP diretamente (172.17.0.1)</strong>. Pelo que pude constatar o número de IP é sempre o mesmo nas instalações (<em>testei em 2 computadores direfentes…</em>).</p>

<h3 id="3-permissões-do-usuário-root-no-banco-de-dados">3. Permissões do usuário root no Banco de Dados</h3>
<p>Antes de fazer a alteração do bind-address (<em>no step seguinte…</em>) é necessário dar privilégio para o usuário root acessar através do IP <strong>172.17.0.1</strong>.</p>

<p><strong>Nota:</strong> Uma instalação nova do Mariadb <strong>não tem senha</strong> para o usuário root. Caso você tenha definido uma senha, use o parâmetro <strong>‘-p’</strong> para que seja solicitada a senha no login.</p>

<p>No exemplo abaixo, vamos aproveitar e definir uma senha para o usuário root na rede <strong>172.17.0.1</strong>.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> root
mysql&gt; grant all privileges on <span class="k">*</span>.<span class="k">*</span> to ‘root’@’172.17.0.1<span class="s1">' identified by ‘my_password’;
mysql&gt; flush privileges;
</span></code></pre></div></div>

<p>Caso também queira definir a senha para o usuário root na rede localhost (127.0.0.1), repita o comando acima trocando <code class="language-plaintext highlighter-rouge">root</code>@<code class="language-plaintext highlighter-rouge">172.17.0.1</code> por <code class="language-plaintext highlighter-rouge">root</code>@<code class="language-plaintext highlighter-rouge">127.0.0.1</code>.</p>

<p>Caso deseje liberar o acesso ao usuario root para qualquer IP, troque o número do IP <code class="language-plaintext highlighter-rouge">172.17.0.1</code> por <code class="language-plaintext highlighter-rouge">%</code>que é o wild card para <strong>“tudo”</strong>, mas isso não é uma boa idéia, pois pode liberar acesso demais e colocar o sistema em risco.</p>

<h3 id="4-alterar-o-bind-address-do-banco-de-dados">4. Alterar o bind-address do Banco de Dados</h3>

<p>Agora pode ser alterado o endereço do banco de dados para o da interface do docker (172.17.0.1).</p>

<p>Para isso, vamos editar o arquivo <strong>.cnf</strong> que pode variar de local dependendo da instalação do banco de dados e do sistema operacional.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf        &lt;<span class="nt">--</span> Mysql
vim /etc/mysql/mariadb.conf.d/50-server.cnf   &lt;<span class="nt">--</span> Mariadb
vim /etc/my.cnf &lt;<span class="nt">--</span> Red Hat / CentOS<span class="sb">`</span>
<span class="c"># Dentro do arquivo, procurar por:</span>
bind-address <span class="o">=</span> 127.0.0.1
<span class="c"># E mudar para o gateway do doker:</span>
bind-address <span class="o">=</span> 172.17.0.1
<span class="c"># Reiniciar o Mariadb (ou Mysql):</span>
<span class="nb">sudo </span>systemctl restart mysqld
</code></pre></div></div>

<h3 id="5-validar">5. Validar</h3>

<p>Agora vamos validar nossas configurações / ambiente.</p>

<p>Primeiramente vamos preparar o ambiente.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose up <span class="nt">--build</span>
</code></pre></div></div>

<p>Após esse comando o docker-compose faz o build, sobe e encerra. Isso é porque a nossa imagem Dockerfile não tem um ENTRYPOIT definido, o que é esperado para a imagem Ubuntu que usamos.</p>

<p>Vamos validar o a conexão:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose run ubuntu bash
</code></pre></div></div>

<p>Com esse comando, abrimos a shell da imagem Ubuntu no docker.</p>

<p>Vamos conectar no Mariadb que está no host.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-h</span> database <span class="nt">-u</span> root <span class="nt">-p</span>
</code></pre></div></div>

<p>A senha que você deverá digitar é a mesma que foi informada no passo 3 em <code class="language-plaintext highlighter-rouge">'my_password'</code>.</p>

<p>Se tudo ocorreu bem, estamos dentro do banco de dados e podemos validar com o comando:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>show databases<span class="p">;</span>
</code></pre></div></div>

<p>Se conseguir ver os DBs, a validação foi bem sucedida!</p>

<p><img src="https://giphy.com/gifs/miyagi-PudZiAbQDUEik?utm_source=iframe&amp;utm_medium=embed&amp;utm_campaign=Embeds&amp;utm_term=https%3A%2F%2Fcdn.embedly.com%2F" alt="Gif Sr. Miyagi acenando positivamente" /></p>
:ET